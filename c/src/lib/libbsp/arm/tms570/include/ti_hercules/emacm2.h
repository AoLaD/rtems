/* The header file is generated by make_header.py from EMACM2.json */
/* Current script's version can be found at: */
/* https://github.com/AoLaD/rtems-tms570-utils/tree/headers/headers/python */

/*
 * Copyright (c) 2014-2015, Premysl Houdek <kom541000@gmail.com>
 *
 * Czech Technical University in Prague
 * Zikova 1903/4
 * 166 36 Praha 6
 * Czech Republic
 *
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * The views and conclusions contained in the software and documentation are those
 * of the authors and should not be interpreted as representing official policies,
 * either expressed or implied, of the FreeBSD Project.
*/
#ifndef LIBBSP_ARM_tms570_EMACM
#define LIBBSP_ARM_tms570_EMACM

#include <bsp/utility.h>

typedef struct{
  uint32_t MACINTSTATMASKED;  /*MAC Interrupt Status (Masked) Register*/
  uint32_t MACINTMASKSET;     /*MAC Interrupt Mask Set Register*/
  uint32_t MACINTMASKCLEAR;   /*MAC Interrupt Mask Clear Register*/
  uint8_t reserved1 [64];
  uint32_t RXMBPENABLE;       /*Receive Multicast/Broadcast/Promiscuous Channel Enable*/
  uint32_t RXUNICASTSET;      /*Receive Unicast Enable Set Register*/
  uint32_t RXUNICASTCLEAR;    /*Receive Unicast Clear Register*/
  uint32_t RXMAXLEN;          /*Receive Maximum Length Register*/
  uint32_t RXBUFFEROFFSET;    /*Receive Buffer Offset Register*/
  uint32_t RXFILTERLOWTHRESH; /*Receive Filter Low Priority Frame Threshold Register*/
  uint8_t reserved2 [8];
  uint32_t RX0FLOWTHRESH;     /*Receive Channel 0 Flow Control Threshold Register*/
  uint8_t reserved3 [28];
  uint32_t RX0FREEBUFFER;     /*Receive Channel 0 Free Buffer Count Register*/
  uint8_t reserved4 [28];
  uint32_t MACCONTROL;        /*MAC Control Register*/
  uint32_t MACSTATUS;         /*MAC Status Register*/
  uint32_t EMCONTROL;         /*Emulation Control Register*/
  uint32_t FIFOCONTROL;       /*FIFO Control Register*/
  uint32_t MACCONFIG;         /*MAC Configuration Register*/
  uint32_t SOFTRESET;         /*Soft Reset Register*/
  uint8_t reserved5 [88];
  uint32_t MACSRCADDRLO;      /*MAC Source Address Low Bytes Register*/
  uint32_t MACSRCADDRHI;      /*MAC Source Address High Bytes Register*/
  uint32_t MACHASH1;          /*MAC Hash Address Register 1*/
  uint32_t MACHASH2;          /*MAC Hash Address Register 2*/
  uint32_t BOFFTEST;          /*Back Off Test Register*/
  uint32_t TPACETEST;         /*Transmit Pacing Algorithm Test Register*/
  uint32_t RXPAUSE;           /*Receive Pause Timer Register*/
  uint32_t TXPAUSE;           /*Transmit Pause Timer Register*/
  uint8_t reserved6 [784];
  uint32_t MACADDRLO;         /*MAC Address Low Bytes Register*/
  uint32_t MACADDRHI;         /*MAC Address High Bytes Register*/
  uint32_t MACINDEX;          /*MAC Index Register*/
  uint8_t reserved7 [244];
  uint32_t TX0HDP;            /*Transmit Channel 0 DMA Head Descriptor Pointer Register*/
  uint8_t reserved8 [28];
  uint32_t RX0HDP;            /*Receive Channel 0 DMA Head Descriptor Pointer Register*/
  uint8_t reserved9 [28];
  uint32_t TX0CP;             /*Transmit Channel 0 Completion Pointer Register*/
  uint8_t reserved10 [28];
  uint32_t RX0CP;             /*Receive Channel 0 Completion Pointer Register*/
  uint8_t reserved11 [24];
  uint32_t RX7CP;             /*Receive Channel 7 Completion Pointer Register*/
} tms570_emacm_t;


/*----------------TMS570_EMACMMACINTSTATMASKED----------------*/
/* field: HOSTPEND - Host pending interrupt (HOSTPEND); masked interrupt read. */
#define TMS570_EMACM_MACINTSTATMASKED_HOSTPEND BSP_FLD32(1)

/* field: STATPEND - Statistics pending interrupt (STATPEND); masked interrupt read. */
#define TMS570_EMACM_MACINTSTATMASKED_STATPEND BSP_FLD32(0)


/*-----------------TMS570_EMACMMACINTMASKSET-----------------*/
/* field: HOSTMASK - Host error interrupt mask set bit. Write 1 to enable interrupt, a write of 0 has no effect. */
#define TMS570_EMACM_MACINTMASKSET_HOSTMASK BSP_FLD32(1)

/* field: STATMASK - Statistics interrupt mask set bit. Write 1 to enable interrupt, a write of 0 has no effect. */
#define TMS570_EMACM_MACINTMASKSET_STATMASK BSP_FLD32(0)


/*----------------TMS570_EMACMMACINTMASKCLEAR----------------*/
/* field: HOSTMASK - Host error interrupt mask clear bit. Write 1 to disable interrupt, a write of 0 has no effect. */
#define TMS570_EMACM_MACINTMASKCLEAR_HOSTMASK BSP_FLD32(1)

/* field: STATMASK - Statistics interrupt mask clear bit. Write 1 to disable interrupt, a write of 0 has no effect. */
#define TMS570_EMACM_MACINTMASKCLEAR_STATMASK BSP_FLD32(0)


/*------------------TMS570_EMACMRXMBPENABLE------------------*/
/* field: RXPASSCRC - Pass receive CRC enable bit */
#define TMS570_EMACM_RXMBPENABLE_RXPASSCRC BSP_FLD32(30)

/* field: RXQOSEN - Receive quality of service enable bit */
#define TMS570_EMACM_RXMBPENABLE_RXQOSEN BSP_FLD32(29)

/* field: RXNOCHAIN - Receive no buffer chaining bit */
#define TMS570_EMACM_RXMBPENABLE_RXNOCHAIN BSP_FLD32(28)

/* field: RXCMFEN - Receive copy MAC control frames enable bit. */
#define TMS570_EMACM_RXMBPENABLE_RXCMFEN BSP_FLD32(24)

/* field: RXCSFEN - Receive copy short frames enable bit. */
#define TMS570_EMACM_RXMBPENABLE_RXCSFEN BSP_FLD32(23)

/* field: RXCEFEN - Receive copy error frames enable bit. */
#define TMS570_EMACM_RXMBPENABLE_RXCEFEN BSP_FLD32(22)

/* field: RXCAFEN - Receive copy all frames enable bit. */
#define TMS570_EMACM_RXMBPENABLE_RXCAFEN BSP_FLD32(21)

/* field: RXPROMCH - Receive promiscuous channel select */
#define TMS570_EMACM_RXMBPENABLE_RXPROMCH(val) BSP_FLD32(val,16, 18)
#define TMS570_EMACM_RXMBPENABLE_RXPROMCH_GET(reg) BSP_FLD32GET(reg,16, 18)
#define TMS570_EMACM_RXMBPENABLE_RXPROMCH_SET(reg,val) BSP_FLD32SET(reg, val,16, 18)

/* field: RXBROADEN - Receive broadcast enable. */
#define TMS570_EMACM_RXMBPENABLE_RXBROADEN BSP_FLD32(13)

/* field: RXBROADCH - Receive broadcast channel select */
#define TMS570_EMACM_RXMBPENABLE_RXBROADCH(val) BSP_FLD32(val,8, 10)
#define TMS570_EMACM_RXMBPENABLE_RXBROADCH_GET(reg) BSP_FLD32GET(reg,8, 10)
#define TMS570_EMACM_RXMBPENABLE_RXBROADCH_SET(reg,val) BSP_FLD32SET(reg, val,8, 10)

/* field: RXMULTEN - RX multicast enable. */
#define TMS570_EMACM_RXMBPENABLE_RXMULTEN BSP_FLD32(5)


/*------------------TMS570_EMACMRXUNICASTSET------------------*/
/* field: RXCH7EN - Receive channel 7 unicast enable set bit. Write 1 to set the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTSET_RXCH7EN BSP_FLD32(7)

/* field: RXCH6EN - Receive channel 6 unicast enable set bit. Write 1 to set the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTSET_RXCH6EN BSP_FLD32(6)

/* field: RXCH5EN - Receive channel 5 unicast enable set bit. Write 1 to set the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTSET_RXCH5EN BSP_FLD32(5)

/* field: RXCH4EN - Receive channel 4 unicast enable set bit. Write 1 to set the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTSET_RXCH4EN BSP_FLD32(4)

/* field: RXCH3EN - Receive channel 3 unicast enable set bit. Write 1 to set the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTSET_RXCH3EN BSP_FLD32(3)

/* field: RXCH2EN - Receive channel 2 unicast enable set bit. Write 1 to set the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTSET_RXCH2EN BSP_FLD32(2)

/* field: RXCH1EN - Receive channel 1 unicast enable set bit. Write 1 to set the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTSET_RXCH1EN BSP_FLD32(1)

/* field: RXCH0EN - Receive channel 0 unicast enable set bit. Write 1 to set the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTSET_RXCH0EN BSP_FLD32(0)


/*-----------------TMS570_EMACMRXUNICASTCLEAR-----------------*/
/* field: RXCH7EN - Receive channel 7 unicast enable clear bit. Write 1 to clear the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTCLEAR_RXCH7EN BSP_FLD32(7)

/* field: RXCH6EN - Receive channel 6 unicast enable clear bit. Write 1 to clear the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTCLEAR_RXCH6EN BSP_FLD32(6)

/* field: RXCH5EN - Receive channel 5 unicast enable clear bit. Write 1 to clear the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTCLEAR_RXCH5EN BSP_FLD32(5)

/* field: RXCH4EN - Receive channel 4 unicast enable clear bit. Write 1 to clear the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTCLEAR_RXCH4EN BSP_FLD32(4)

/* field: RXCH3EN - Receive channel 3 unicast enable clear bit. Write 1 to clear the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTCLEAR_RXCH3EN BSP_FLD32(3)

/* field: RXCH2EN - Receive channel 2 unicast enable clear bit. Write 1 to clear the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTCLEAR_RXCH2EN BSP_FLD32(2)

/* field: RXCH1EN - Receive channel 1 unicast enable clear bit. Write 1 to clear the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTCLEAR_RXCH1EN BSP_FLD32(1)

/* field: RXCH0EN - Receive channel 0 unicast enable clear bit. Write 1 to clear the enable, a write of 0 has no effect. */
#define TMS570_EMACM_RXUNICASTCLEAR_RXCH0EN BSP_FLD32(0)


/*--------------------TMS570_EMACMRXMAXLEN--------------------*/
/* field: RXMAXLEN - Receive maximum frame length. These bits determine the maximum length of a received frame. */
#define TMS570_EMACM_RXMAXLEN_RXMAXLEN(val) BSP_FLD32(val,0, 15)
#define TMS570_EMACM_RXMAXLEN_RXMAXLEN_GET(reg) BSP_FLD32GET(reg,0, 15)
#define TMS570_EMACM_RXMAXLEN_RXMAXLEN_SET(reg,val) BSP_FLD32SET(reg, val,0, 15)


/*-----------------TMS570_EMACMRXBUFFEROFFSET-----------------*/
/* field: RXBUFFEROFFSET - Receive buffer offset value. */
#define TMS570_EMACM_RXBUFFEROFFSET_RXBUFFEROFFSET(val) BSP_FLD32(val,0, 15)
#define TMS570_EMACM_RXBUFFEROFFSET_RXBUFFEROFFSET_GET(reg) BSP_FLD32GET(reg,0, 15)
#define TMS570_EMACM_RXBUFFEROFFSET_RXBUFFEROFFSET_SET(reg,val) BSP_FLD32SET(reg, val,0, 15)


/*---------------TMS570_EMACMRXFILTERLOWTHRESH---------------*/
/* field: RXFILTERTHRESH - Receive filter low threshold. */
#define TMS570_EMACM_RXFILTERLOWTHRESH_RXFILTERTHRESH(val) BSP_FLD32(val,0, 7)
#define TMS570_EMACM_RXFILTERLOWTHRESH_RXFILTERTHRESH_GET(reg) BSP_FLD32GET(reg,0, 7)
#define TMS570_EMACM_RXFILTERLOWTHRESH_RXFILTERTHRESH_SET(reg,val) BSP_FLD32SET(reg, val,0, 7)


/*-----------------TMS570_EMACMRX0FLOWTHRESH-----------------*/
/* field: RXnFLOWTHRESH - Receive flow threshold. */
#define TMS570_EMACM_RX0FLOWTHRESH_RXnFLOWTHRESH(val) BSP_FLD32(val,0, 7)
#define TMS570_EMACM_RX0FLOWTHRESH_RXnFLOWTHRESH_GET(reg) BSP_FLD32GET(reg,0, 7)
#define TMS570_EMACM_RX0FLOWTHRESH_RXnFLOWTHRESH_SET(reg,val) BSP_FLD32SET(reg, val,0, 7)


/*-----------------TMS570_EMACMRX0FREEBUFFER-----------------*/
/* field: RXnFREEBUF - Receive free buffer count. These bits contain the count of free buffers available. */
#define TMS570_EMACM_RX0FREEBUFFER_RXnFREEBUF(val) BSP_FLD32(val,0, 15)
#define TMS570_EMACM_RX0FREEBUFFER_RXnFREEBUF_GET(reg) BSP_FLD32GET(reg,0, 15)
#define TMS570_EMACM_RX0FREEBUFFER_RXnFREEBUF_SET(reg,val) BSP_FLD32SET(reg, val,0, 15)


/*-------------------TMS570_EMACMMACCONTROL-------------------*/
/* field: RMIISPEED - RMII interface transmit and receive speed select. */
#define TMS570_EMACM_MACCONTROL_RMIISPEED BSP_FLD32(15)

/* field: RXOFFLENBLOCK - Receive offset / length word write block. */
#define TMS570_EMACM_MACCONTROL_RXOFFLENBLOCK BSP_FLD32(14)

/* field: RXOWNERSHIP - Receive ownership write bit value. */
#define TMS570_EMACM_MACCONTROL_RXOWNERSHIP BSP_FLD32(13)

/* field: CMDIDLE - Command Idle bit */
#define TMS570_EMACM_MACCONTROL_CMDIDLE BSP_FLD32(11)

/* field: TXSHORTGAPEN - Transmit Short Gap Enable */
#define TMS570_EMACM_MACCONTROL_TXSHORTGAPEN BSP_FLD32(10)

/* field: TXPTYPE - Transmit queue priority type */
#define TMS570_EMACM_MACCONTROL_TXPTYPE BSP_FLD32(9)

/* field: TXPACE - Transmit pacing enable bit */
#define TMS570_EMACM_MACCONTROL_TXPACE BSP_FLD32(6)

/* field: GMIIEN - GMII enable bit */
#define TMS570_EMACM_MACCONTROL_GMIIEN BSP_FLD32(5)

/* field: TXFLOWEN - Transmit flow control enable bit. */
#define TMS570_EMACM_MACCONTROL_TXFLOWEN BSP_FLD32(4)

/* field: RXBUFFERFLOWEN - Receive buffer flow control enable bit */
#define TMS570_EMACM_MACCONTROL_RXBUFFERFLOWEN BSP_FLD32(3)

/* field: LOOPBACK - Loopback mode. The loopback mode forces internal full-duplex mode regardless of the FULLDUPLEX bit. */
#define TMS570_EMACM_MACCONTROL_LOOPBACK BSP_FLD32(1)

/* field: FULLDUPLEX - Full duplex mode. */
#define TMS570_EMACM_MACCONTROL_FULLDUPLEX BSP_FLD32(0)


/*-------------------TMS570_EMACMMACSTATUS-------------------*/
/* field: IDLE - EMAC idle bit. This bit is cleared to 0 at reset; one clock after reset, it goes to 1. */
#define TMS570_EMACM_MACSTATUS_IDLE BSP_FLD32(31)

/* field: TXERRCODE - Transmit host error code. These bits indicate that EMAC detected transmit DMA related host errors. */
#define TMS570_EMACM_MACSTATUS_TXERRCODE(val) BSP_FLD32(val,20, 23)
#define TMS570_EMACM_MACSTATUS_TXERRCODE_GET(reg) BSP_FLD32GET(reg,20, 23)
#define TMS570_EMACM_MACSTATUS_TXERRCODE_SET(reg,val) BSP_FLD32SET(reg, val,20, 23)

/* field: TXERRCH - Transmit host error channel. These bits indicate which transmit channel the host error occurred on. */
#define TMS570_EMACM_MACSTATUS_TXERRCH(val) BSP_FLD32(val,16, 18)
#define TMS570_EMACM_MACSTATUS_TXERRCH_GET(reg) BSP_FLD32GET(reg,16, 18)
#define TMS570_EMACM_MACSTATUS_TXERRCH_SET(reg,val) BSP_FLD32SET(reg, val,16, 18)

/* field: RXERRCODE - Receive host error code. These bits indicate that EMAC detected receive DMA related host errors. */
#define TMS570_EMACM_MACSTATUS_RXERRCODE(val) BSP_FLD32(val,12, 15)
#define TMS570_EMACM_MACSTATUS_RXERRCODE_GET(reg) BSP_FLD32GET(reg,12, 15)
#define TMS570_EMACM_MACSTATUS_RXERRCODE_SET(reg,val) BSP_FLD32SET(reg, val,12, 15)

/* field: RXERRCH - Receive host error channel. These bits indicate which receive channel the host error occurred on. */
#define TMS570_EMACM_MACSTATUS_RXERRCH(val) BSP_FLD32(val,8, 10)
#define TMS570_EMACM_MACSTATUS_RXERRCH_GET(reg) BSP_FLD32GET(reg,8, 10)
#define TMS570_EMACM_MACSTATUS_RXERRCH_SET(reg,val) BSP_FLD32SET(reg, val,8, 10)

/* field: RXQOSACT - Receive Quality of Service (QOS) active bit. */
#define TMS570_EMACM_MACSTATUS_RXQOSACT BSP_FLD32(2)

/* field: RXFLOWACT - Receive flow control active bit. */
#define TMS570_EMACM_MACSTATUS_RXFLOWACT BSP_FLD32(1)

/* field: TXFLOWACT - Transmit flow control active bit. */
#define TMS570_EMACM_MACSTATUS_TXFLOWACT BSP_FLD32(0)


/*-------------------TMS570_EMACMEMCONTROL-------------------*/
/* field: SOFT - Emulation soft bit. */
#define TMS570_EMACM_EMCONTROL_SOFT BSP_FLD32(1)

/* field: FREE - Emulation free bit. */
#define TMS570_EMACM_EMCONTROL_FREE BSP_FLD32(0)


/*------------------TMS570_EMACMFIFOCONTROL------------------*/
/* field: TXCELLTHRESH - Transmit FIFO cell threshold. */
#define TMS570_EMACM_FIFOCONTROL_TXCELLTHRESH(val) BSP_FLD32(val,0, 1)
#define TMS570_EMACM_FIFOCONTROL_TXCELLTHRESH_GET(reg) BSP_FLD32GET(reg,0, 1)
#define TMS570_EMACM_FIFOCONTROL_TXCELLTHRESH_SET(reg,val) BSP_FLD32SET(reg, val,0, 1)


/*-------------------TMS570_EMACMMACCONFIG-------------------*/
/* field: TXCELLDEPTH - Transmit cell depth. These bits indicate the number of cells in the transmit FIFO. */
#define TMS570_EMACM_MACCONFIG_TXCELLDEPTH(val) BSP_FLD32(val,24, 31)
#define TMS570_EMACM_MACCONFIG_TXCELLDEPTH_GET(reg) BSP_FLD32GET(reg,24, 31)
#define TMS570_EMACM_MACCONFIG_TXCELLDEPTH_SET(reg,val) BSP_FLD32SET(reg, val,24, 31)

/* field: RXCELLDEPTH - Receive cell depth. These bits indicate the number of cells in the receive FIFO. */
#define TMS570_EMACM_MACCONFIG_RXCELLDEPTH(val) BSP_FLD32(val,16, 23)
#define TMS570_EMACM_MACCONFIG_RXCELLDEPTH_GET(reg) BSP_FLD32GET(reg,16, 23)
#define TMS570_EMACM_MACCONFIG_RXCELLDEPTH_SET(reg,val) BSP_FLD32SET(reg, val,16, 23)

/* field: ADDRESSTYPE - Address type */
#define TMS570_EMACM_MACCONFIG_ADDRESSTYPE(val) BSP_FLD32(val,8, 15)
#define TMS570_EMACM_MACCONFIG_ADDRESSTYPE_GET(reg) BSP_FLD32GET(reg,8, 15)
#define TMS570_EMACM_MACCONFIG_ADDRESSTYPE_SET(reg,val) BSP_FLD32SET(reg, val,8, 15)

/* field: MACCFIG - MAC configuration value */
#define TMS570_EMACM_MACCONFIG_MACCFIG(val) BSP_FLD32(val,0, 7)
#define TMS570_EMACM_MACCONFIG_MACCFIG_GET(reg) BSP_FLD32GET(reg,0, 7)
#define TMS570_EMACM_MACCONFIG_MACCFIG_SET(reg,val) BSP_FLD32SET(reg, val,0, 7)


/*-------------------TMS570_EMACMSOFTRESET-------------------*/
/* field: SOFTRESET - Software reset. Writing a 1 to this bit causes the EMAC logic to be reset. */
#define TMS570_EMACM_SOFTRESET_SOFTRESET BSP_FLD32(0)


/*------------------TMS570_EMACMMACSRCADDRLO------------------*/
/* field: MACSRCADDR0 - MAC source address lower 8-0 bits (byte 0) */
#define TMS570_EMACM_MACSRCADDRLO_MACSRCADDR0(val) BSP_FLD32(val,8, 15)
#define TMS570_EMACM_MACSRCADDRLO_MACSRCADDR0_GET(reg) BSP_FLD32GET(reg,8, 15)
#define TMS570_EMACM_MACSRCADDRLO_MACSRCADDR0_SET(reg,val) BSP_FLD32SET(reg, val,8, 15)

/* field: MACSRCADDR1 - MAC source address bits 15-8 (byte 1) */
#define TMS570_EMACM_MACSRCADDRLO_MACSRCADDR1(val) BSP_FLD32(val,0, 7)
#define TMS570_EMACM_MACSRCADDRLO_MACSRCADDR1_GET(reg) BSP_FLD32GET(reg,0, 7)
#define TMS570_EMACM_MACSRCADDRLO_MACSRCADDR1_SET(reg,val) BSP_FLD32SET(reg, val,0, 7)


/*------------------TMS570_EMACMMACSRCADDRHI------------------*/
/* field: MACSRCADDR2 - MAC source address bits 23-16 (byte 2) */
#define TMS570_EMACM_MACSRCADDRHI_MACSRCADDR2(val) BSP_FLD32(val,24, 31)
#define TMS570_EMACM_MACSRCADDRHI_MACSRCADDR2_GET(reg) BSP_FLD32GET(reg,24, 31)
#define TMS570_EMACM_MACSRCADDRHI_MACSRCADDR2_SET(reg,val) BSP_FLD32SET(reg, val,24, 31)

/* field: MACSRCADDR3 - MAC source address bits 31-24 (byte 3) */
#define TMS570_EMACM_MACSRCADDRHI_MACSRCADDR3(val) BSP_FLD32(val,16, 23)
#define TMS570_EMACM_MACSRCADDRHI_MACSRCADDR3_GET(reg) BSP_FLD32GET(reg,16, 23)
#define TMS570_EMACM_MACSRCADDRHI_MACSRCADDR3_SET(reg,val) BSP_FLD32SET(reg, val,16, 23)

/* field: MACSRCADDR4 - MAC source address bits 39-32 (byte 4) */
#define TMS570_EMACM_MACSRCADDRHI_MACSRCADDR4(val) BSP_FLD32(val,8, 15)
#define TMS570_EMACM_MACSRCADDRHI_MACSRCADDR4_GET(reg) BSP_FLD32GET(reg,8, 15)
#define TMS570_EMACM_MACSRCADDRHI_MACSRCADDR4_SET(reg,val) BSP_FLD32SET(reg, val,8, 15)

/* field: MACSRCADDR5 - MAC source address bits 47-40 (byte 5) */
#define TMS570_EMACM_MACSRCADDRHI_MACSRCADDR5(val) BSP_FLD32(val,0, 7)
#define TMS570_EMACM_MACSRCADDRHI_MACSRCADDR5_GET(reg) BSP_FLD32GET(reg,0, 7)
#define TMS570_EMACM_MACSRCADDRHI_MACSRCADDR5_SET(reg,val) BSP_FLD32SET(reg, val,0, 7)


/*--------------------TMS570_EMACMMACHASH1--------------------*/
/* field: MACHASH1 - Least-significant 32 bits of the hash table corresponding to hash values 0 to 31. */
#define TMS570_EMACM_MACHASH1_MACHASH1(val) BSP_FLD32(val,0, 31)
#define TMS570_EMACM_MACHASH1_MACHASH1_GET(reg) BSP_FLD32GET(reg,0, 31)
#define TMS570_EMACM_MACHASH1_MACHASH1_SET(reg,val) BSP_FLD32SET(reg, val,0, 31)


/*--------------------TMS570_EMACMMACHASH2--------------------*/
/* field: MACHASH2 - Most-significant 32 bits of the hash table corresponding to hash values 32 to 63. */
#define TMS570_EMACM_MACHASH2_MACHASH2(val) BSP_FLD32(val,0, 31)
#define TMS570_EMACM_MACHASH2_MACHASH2_GET(reg) BSP_FLD32GET(reg,0, 31)
#define TMS570_EMACM_MACHASH2_MACHASH2_SET(reg,val) BSP_FLD32SET(reg, val,0, 31)


/*--------------------TMS570_EMACMBOFFTEST--------------------*/
/* field: RNDNUM - Backoff random number generator. */
#define TMS570_EMACM_BOFFTEST_RNDNUM(val) BSP_FLD32(val,16, 25)
#define TMS570_EMACM_BOFFTEST_RNDNUM_GET(reg) BSP_FLD32GET(reg,16, 25)
#define TMS570_EMACM_BOFFTEST_RNDNUM_SET(reg,val) BSP_FLD32SET(reg, val,16, 25)

/* field: COLLCOUNT - Collision count. These bits indicate the number of collisions the current frame has experienced. */
#define TMS570_EMACM_BOFFTEST_COLLCOUNT(val) BSP_FLD32(val,12, 15)
#define TMS570_EMACM_BOFFTEST_COLLCOUNT_GET(reg) BSP_FLD32GET(reg,12, 15)
#define TMS570_EMACM_BOFFTEST_COLLCOUNT_SET(reg,val) BSP_FLD32SET(reg, val,12, 15)

/* field: TXBACKOFF - Backoff count. */
#define TMS570_EMACM_BOFFTEST_TXBACKOFF(val) BSP_FLD32(val,0, 9)
#define TMS570_EMACM_BOFFTEST_TXBACKOFF_GET(reg) BSP_FLD32GET(reg,0, 9)
#define TMS570_EMACM_BOFFTEST_TXBACKOFF_SET(reg,val) BSP_FLD32SET(reg, val,0, 9)


/*-------------------TMS570_EMACMTPACETEST-------------------*/
/* field: PACEVAL - Pacing register current value. A nonzero value in this field indicates that transmit pacing is active. */
#define TMS570_EMACM_TPACETEST_PACEVAL(val) BSP_FLD32(val,0, 4)
#define TMS570_EMACM_TPACETEST_PACEVAL_GET(reg) BSP_FLD32GET(reg,0, 4)
#define TMS570_EMACM_TPACETEST_PACEVAL_SET(reg,val) BSP_FLD32SET(reg, val,0, 4)


/*--------------------TMS570_EMACMRXPAUSE--------------------*/
/* field: PAUSETIMER - Receive pause timer value. */
#define TMS570_EMACM_RXPAUSE_PAUSETIMER(val) BSP_FLD32(val,0, 15)
#define TMS570_EMACM_RXPAUSE_PAUSETIMER_GET(reg) BSP_FLD32GET(reg,0, 15)
#define TMS570_EMACM_RXPAUSE_PAUSETIMER_SET(reg,val) BSP_FLD32SET(reg, val,0, 15)


/*--------------------TMS570_EMACMTXPAUSE--------------------*/
/* field: PAUSETIMER - Transmit pause timer value. */
#define TMS570_EMACM_TXPAUSE_PAUSETIMER(val) BSP_FLD32(val,0, 15)
#define TMS570_EMACM_TXPAUSE_PAUSETIMER_GET(reg) BSP_FLD32GET(reg,0, 15)
#define TMS570_EMACM_TXPAUSE_PAUSETIMER_SET(reg,val) BSP_FLD32SET(reg, val,0, 15)


/*-------------------TMS570_EMACMMACADDRLO-------------------*/
/* field: VALID - Address valid bit. */
#define TMS570_EMACM_MACADDRLO_VALID BSP_FLD32(20)

/* field: MATCHFILT - Match or filter bit */
#define TMS570_EMACM_MACADDRLO_MATCHFILT BSP_FLD32(19)

/* field: CHANNEL - Channel select. Determines which receive channel a valid address match will be transferred to. */
#define TMS570_EMACM_MACADDRLO_CHANNEL(val) BSP_FLD32(val,16, 18)
#define TMS570_EMACM_MACADDRLO_CHANNEL_GET(reg) BSP_FLD32GET(reg,16, 18)
#define TMS570_EMACM_MACADDRLO_CHANNEL_SET(reg,val) BSP_FLD32SET(reg, val,16, 18)

/* field: MACADDR0 - MAC address lower 8-0 bits (byte 0) */
#define TMS570_EMACM_MACADDRLO_MACADDR0(val) BSP_FLD32(val,8, 15)
#define TMS570_EMACM_MACADDRLO_MACADDR0_GET(reg) BSP_FLD32GET(reg,8, 15)
#define TMS570_EMACM_MACADDRLO_MACADDR0_SET(reg,val) BSP_FLD32SET(reg, val,8, 15)

/* field: MACADDR1 - MAC address bits 15-8 (byte 1) */
#define TMS570_EMACM_MACADDRLO_MACADDR1(val) BSP_FLD32(val,0, 7)
#define TMS570_EMACM_MACADDRLO_MACADDR1_GET(reg) BSP_FLD32GET(reg,0, 7)
#define TMS570_EMACM_MACADDRLO_MACADDR1_SET(reg,val) BSP_FLD32SET(reg, val,0, 7)


/*-------------------TMS570_EMACMMACADDRHI-------------------*/
/* field: MACADDR2 - MAC source address bits 23-16 (byte 2) */
#define TMS570_EMACM_MACADDRHI_MACADDR2(val) BSP_FLD32(val,24, 31)
#define TMS570_EMACM_MACADDRHI_MACADDR2_GET(reg) BSP_FLD32GET(reg,24, 31)
#define TMS570_EMACM_MACADDRHI_MACADDR2_SET(reg,val) BSP_FLD32SET(reg, val,24, 31)

/* field: MACADDR3 - MAC source address bits 31-24 (byte 3) */
#define TMS570_EMACM_MACADDRHI_MACADDR3(val) BSP_FLD32(val,16, 23)
#define TMS570_EMACM_MACADDRHI_MACADDR3_GET(reg) BSP_FLD32GET(reg,16, 23)
#define TMS570_EMACM_MACADDRHI_MACADDR3_SET(reg,val) BSP_FLD32SET(reg, val,16, 23)

/* field: MACADDR4 - MAC source address bits 39-32 (byte 4) */
#define TMS570_EMACM_MACADDRHI_MACADDR4(val) BSP_FLD32(val,8, 15)
#define TMS570_EMACM_MACADDRHI_MACADDR4_GET(reg) BSP_FLD32GET(reg,8, 15)
#define TMS570_EMACM_MACADDRHI_MACADDR4_SET(reg,val) BSP_FLD32SET(reg, val,8, 15)

/* field: MACADDR5 - MAC source address bits 47-40 (byte 5). Bit 40 is the group bit. It is forced to 0 and read as 0. */
#define TMS570_EMACM_MACADDRHI_MACADDR5(val) BSP_FLD32(val,0, 7)
#define TMS570_EMACM_MACADDRHI_MACADDR5_GET(reg) BSP_FLD32GET(reg,0, 7)
#define TMS570_EMACM_MACADDRHI_MACADDR5_SET(reg,val) BSP_FLD32SET(reg, val,0, 7)


/*--------------------TMS570_EMACMMACINDEX--------------------*/
/* field: MACINDEX - MAC address index. All eight addresses share the upper 40 bits. */
#define TMS570_EMACM_MACINDEX_MACINDEX(val) BSP_FLD32(val,0, 2)
#define TMS570_EMACM_MACINDEX_MACINDEX_GET(reg) BSP_FLD32GET(reg,0, 2)
#define TMS570_EMACM_MACINDEX_MACINDEX_SET(reg,val) BSP_FLD32SET(reg, val,0, 2)


/*---------------------TMS570_EMACMTX0HDP---------------------*/
/* field: TXnHDP - Transmit channel n DMA Head Descriptor pointer. */
#define TMS570_EMACM_TX0HDP_TXnHDP(val) BSP_FLD32(val,0, 31)
#define TMS570_EMACM_TX0HDP_TXnHDP_GET(reg) BSP_FLD32GET(reg,0, 31)
#define TMS570_EMACM_TX0HDP_TXnHDP_SET(reg,val) BSP_FLD32SET(reg, val,0, 31)


/*---------------------TMS570_EMACMRX0HDP---------------------*/
/* field: RXnHDP - Receive channel n DMA Head Descriptor pointer. */
#define TMS570_EMACM_RX0HDP_RXnHDP(val) BSP_FLD32(val,0, 31)
#define TMS570_EMACM_RX0HDP_RXnHDP_GET(reg) BSP_FLD32GET(reg,0, 31)
#define TMS570_EMACM_RX0HDP_RXnHDP_SET(reg,val) BSP_FLD32SET(reg, val,0, 31)


/*---------------------TMS570_EMACMTX0CP---------------------*/
/* field: TXnCP - Transmit channel n completion pointer register is written by the host with the buffer descriptor */
#define TMS570_EMACM_TX0CP_TXnCP(val) BSP_FLD32(val,0, 31)
#define TMS570_EMACM_TX0CP_TXnCP_GET(reg) BSP_FLD32GET(reg,0, 31)
#define TMS570_EMACM_TX0CP_TXnCP_SET(reg,val) BSP_FLD32SET(reg, val,0, 31)


/*---------------------TMS570_EMACMRX0CP---------------------*/
/* field: RXnCP - Receive channel n completion pointer register is written by the host with the buffer descriptor */
#define TMS570_EMACM_RX0CP_RXnCP(val) BSP_FLD32(val,0, 31)
#define TMS570_EMACM_RX0CP_RXnCP_GET(reg) BSP_FLD32GET(reg,0, 31)
#define TMS570_EMACM_RX0CP_RXnCP_SET(reg,val) BSP_FLD32SET(reg, val,0, 31)


/*---------------------TMS570_EMACMRX7CP---------------------*/
/* field: RXnCP - Receive channel n completion pointer register is written by the host with the buffer descriptor */
#define TMS570_EMACM_RX7CP_RXnCP(val) BSP_FLD32(val,0, 31)
#define TMS570_EMACM_RX7CP_RXnCP_GET(reg) BSP_FLD32GET(reg,0, 31)
#define TMS570_EMACM_RX7CP_RXnCP_SET(reg,val) BSP_FLD32SET(reg, val,0, 31)



#endif /* LIBBSP_ARM_tms570_EMACM */
